// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/11/2021 20:42:44"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          RCA_special
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module RCA_special_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] A16;
reg [15:0] B16;
reg cin16;
// wires                                               
wire c_lastin;
wire cout16;
wire [15:0] sum16;

// assign statements (if any)                          
RCA_special i1 (
// port map - connection between master ports and signals/registers   
	.A16(A16),
	.B16(B16),
	.c_lastin(c_lastin),
	.cin16(cin16),
	.cout16(cout16),
	.sum16(sum16)
);
initial 
begin 
#1000000 $finish;
end 
// A16[ 15 ]
initial
begin
	A16[15] = 1'b1;
end 
// A16[ 14 ]
initial
begin
	A16[14] = 1'b0;
end 
// A16[ 13 ]
initial
begin
	A16[13] = 1'b0;
end 
// A16[ 12 ]
initial
begin
	A16[12] = 1'b0;
end 
// A16[ 11 ]
initial
begin
	A16[11] = 1'b0;
end 
// A16[ 10 ]
initial
begin
	A16[10] = 1'b0;
end 
// A16[ 9 ]
initial
begin
	A16[9] = 1'b0;
end 
// A16[ 8 ]
initial
begin
	A16[8] = 1'b0;
end 
// A16[ 7 ]
initial
begin
	A16[7] = 1'b0;
end 
// A16[ 6 ]
initial
begin
	A16[6] = 1'b0;
end 
// A16[ 5 ]
initial
begin
	A16[5] = 1'b0;
end 
// A16[ 4 ]
initial
begin
	A16[4] = 1'b0;
end 
// A16[ 3 ]
initial
begin
	A16[3] = 1'b0;
end 
// A16[ 2 ]
initial
begin
	A16[2] = 1'b0;
end 
// A16[ 1 ]
initial
begin
	A16[1] = 1'b0;
end 
// A16[ 0 ]
initial
begin
	A16[0] = 1'b0;
end 
// B16[ 15 ]
initial
begin
	B16[15] = 1'b1;
end 
// B16[ 14 ]
initial
begin
	B16[14] = 1'b1;
end 
// B16[ 13 ]
initial
begin
	B16[13] = 1'b1;
end 
// B16[ 12 ]
initial
begin
	B16[12] = 1'b1;
end 
// B16[ 11 ]
initial
begin
	B16[11] = 1'b0;
end 
// B16[ 10 ]
initial
begin
	B16[10] = 1'b0;
end 
// B16[ 9 ]
initial
begin
	B16[9] = 1'b0;
end 
// B16[ 8 ]
initial
begin
	B16[8] = 1'b0;
end 
// B16[ 7 ]
initial
begin
	B16[7] = 1'b1;
end 
// B16[ 6 ]
initial
begin
	B16[6] = 1'b1;
end 
// B16[ 5 ]
initial
begin
	B16[5] = 1'b1;
end 
// B16[ 4 ]
initial
begin
	B16[4] = 1'b1;
end 
// B16[ 3 ]
initial
begin
	B16[3] = 1'b1;
end 
// B16[ 2 ]
initial
begin
	B16[2] = 1'b1;
end 
// B16[ 1 ]
initial
begin
	B16[1] = 1'b1;
end 
// B16[ 0 ]
initial
begin
	B16[0] = 1'b1;
end 

// cin16
initial
begin
	cin16 = 1'b1;
end 
endmodule

